/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Transactions.SaleSNF;

import Dao.sale_snf_transactions;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author bansal
 */
public class SaleSNFDaily extends javax.swing.JInternalFrame implements CellEditorListener{
  
static Date current_date=null;
static String group_name=null;
static int gid=0;
static int account_typeid=0;
static ArrayList<Dao.accounts> accounts_list=new ArrayList<Dao.accounts>();

int no_of_accounts=0;
    /**
     * Creates new form SaleFatSnf
     */
    public SaleSNFDaily(String gname,int gid,int acc_typeid,JDesktopPane d,int no_of_accounts ) throws Exception {    
    
      
        
        
        current_date=new Date();
        this.no_of_accounts=no_of_accounts;
        initComponents();
          this.setTitle("Sale SNF Daily Transaction");
        label_group_name.setText(gname);
        group_name=gname;
        account_typeid=acc_typeid;
        this.gid=gid;
        table.getDefaultEditor(String.class).addCellEditorListener(this);
        fillTable();
         
         d.add(this);
    /*    String header[]={"Date","MorMilk","EveMilk","Ammount"};
        
        Object row[][]=new Object[30][];
        for(int i=0;i<30;i++){
            row[i]=new Object[]{new Date()+"","","",""};
       }
        DefaultTableModel dtm=new DefaultTableModel(row,header);
        JTable table=new JTable(dtm);
        table.setVisible(true);
        
        table.setBounds(50, 50, 400, 400);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        label_group_name = new javax.swing.JLabel();
        date = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable(){

            public boolean isCellEditable(int row,int column) {
                if(column==5||column ==6||column==7||column==12||column==13||column==14||column==15||column==0) // specify this depending upon ur requirement. Here the cell 2,3 is not editable.
                return false;
                else
                return true;
            }

            public Component prepareRenderer
            (TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected
                if (Index_row % 2 != 0 && !isCellSelected(Index_row, Index_col)) {
                    comp.setBackground(new Color(255, 228, 196));
                }
                else {
                    comp.setBackground(Color.white);
                }
                return comp;
            }

        };
        Update = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        sum_mor_milk_l = new javax.swing.JLabel();
        sum_eve_milk_l = new javax.swing.JLabel();
        sum_eve_ghee_l1 = new javax.swing.JLabel();
        sum_mor_ghee_l = new javax.swing.JLabel();
        sum_mor_powder_l1 = new javax.swing.JLabel();
        sum_eve_powder_l1 = new javax.swing.JLabel();
        sum_eve_ammount_l1 = new javax.swing.JLabel();
        sum_mor_ammount_l1 = new javax.swing.JLabel();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);

        jPanel1.setBackground(new java.awt.Color(255, 228, 196));
        jPanel1.setForeground(new java.awt.Color(255, 228, 192));

        label_group_name.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        label_group_name.setText("ACCOUNT_NAME");

        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });

        jLabel1.setText("Date");

        date.setDate(new Date());

        Object row[][]=new Object[no_of_accounts][];

        for(int i=0;i<no_of_accounts;i++){
            row[i]=new Object[]{"","","","","","","","","","","","","","","",""};
        }
        table.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            row,
            new String [] {
                "Name","MMilk","Fat","SNF","Fat Rate","Ghee rs","Powder rs","Ammount","EMILK","Fat","SNF","Fat Rate","Ghee rs","Powder rs","Ammount","Total Ammount"
            }

        ));
        table.setShowGrid(true);
        table.setCellSelectionEnabled(true);
        for(int i=0;i<table.getRowCount();i++){
            table.setRowHeight(30);
        }
        table.setSelectionBackground(new java.awt.Color(255, 228, 196));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for(int i=0;i<table.getColumnCount();i++){
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);}
        table.getColumnModel().getColumn(0).setMinWidth(200);
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tableFocusLost(evt);
            }
        });
        table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        sum_mor_milk_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_milk_l.setText("TOTAL MILK-MOR:0");

        sum_eve_milk_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_milk_l.setText("TOTAL MILK-EVE:0");

        sum_eve_ghee_l1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_ghee_l1.setText("TOTAL GHEE-EVE:0");

        sum_mor_ghee_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_ghee_l.setText("TOTAL GHEE-MOR:0");

        sum_mor_powder_l1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_powder_l1.setText("TOTAL POWDER-MOR:0");

        sum_eve_powder_l1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_powder_l1.setText("TOTAL POWDER-EVE:0");

        sum_eve_ammount_l1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_ammount_l1.setText("TOTAL AMMOUNT-EVE:0");

        sum_mor_ammount_l1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_ammount_l1.setText("TOTAL AMMOUNT-MOR:0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sum_mor_milk_l, javax.swing.GroupLayout.DEFAULT_SIZE, 205, Short.MAX_VALUE)
                            .addComponent(sum_eve_milk_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(45, 45, 45)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sum_mor_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_eve_ghee_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(132, 132, 132)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sum_mor_powder_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_eve_powder_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(149, 149, 149)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sum_mor_ammount_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_eve_ammount_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(Update)
                        .addGap(27, 27, 27)
                        .addComponent(exit)))
                .addContainerGap(275, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(label_group_name, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(359, 359, 359))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label_group_name, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sum_mor_milk_l, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_mor_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_mor_powder_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(sum_eve_milk_l, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 3, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sum_eve_ghee_l1, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                                    .addComponent(sum_eve_powder_l1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(Update)
                            .addComponent(exit))
                        .addContainerGap(137, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(sum_mor_ammount_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sum_eve_ammount_l1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed


    sum_mor_milk_l.setText("TOTAL MILK-MOR:"+0);
            sum_mor_ghee_l.setText("TOTAL GHEE-MOR:"+0);
            sum_mor_powder_l1.setText("TOTAL POWDER-MOR:"+0);
            
            sum_mor_ammount_l1.setText("TOTAL AMMOUNT-MOR:"+0);
            sum_eve_milk_l.setText("TOTAL MILK-EVE:"+0);
            sum_eve_ghee_l1.setText("TOTAL GHEE-EVE"+0);
            sum_eve_powder_l1.setText("TOTAL POWDER-EVE:"+0);
            
            sum_eve_ammount_l1.setText("TOTAL AMMOUNT-EVE:"+0); 
        
    try {
      current_date=date.getDate();

Object row[][]=new Object[no_of_accounts][];

        for(int i=0;i<no_of_accounts;i++){
            row[i]=new Object[]{"","","","","","","","","","","","","","","",""};
       }
table.setModel(new javax.swing.table.DefaultTableModel(
    row,
    new String [] {
         "Name","MMilk","Fat","SNF","Fat Rate","Ghee rs","Powder rs","Ammount","EMILK","Fat","SNF","Fat Rate","Ghee rs","Powder rs","Ammount","Total Ammount"
    }
));
      

DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
for(int i=0;i<table.getColumnCount();i++){
table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);}
table.getColumnModel().getColumn(0).setMinWidth(200);

fillTable();
    }catch(Exception e){e.printStackTrace();}   
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed

    private void tablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePropertyChange

      
// TODO add your handling code here:
    }//GEN-LAST:event_tablePropertyChange

    private void tableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusLost


        
// TODO add your handling code here:
    }//GEN-LAST:event_tableFocusLost

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
    try {
        
        
        
               int rows=table.getRowCount();
               ArrayList<Dao.sale_snf_transactions> aa=new ArrayList<Dao.sale_snf_transactions>();
          SaleSNF.new_enteries.clear();
          SaleSNF.saved_enteries.clear();
        for(int i=0;i<rows ;i++){
            Dao.sale_snf_transactions aaa=new Dao.sale_snf_transactions();
            aaa.setAid((String)accounts_list.get(i).getAid());
            aaa.setGid(gid);
            
            aaa.setTdate(new java.sql.Date(current_date.getTime()));
            
          try{
                if(((String)table.getValueAt(i, 1)).equals(""))
                    aaa.setMor_milk(0.0f);
                else aaa.setMor_milk(Float.parseFloat((String)table.getValueAt(i, 1)));
            }
            catch(Exception e){
                e.printStackTrace();
                aaa.setMor_milk(0);
            }
            
            try{
                if(((String)table.getValueAt(i, 2)).equals(""))
                    aaa.setMor_fat(0.0f);
                else 
                    aaa.setMor_fat(Float.parseFloat((String)table.getValueAt(i, 2)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_fat(0);
            }
            
            try{
                if(((String)table.getValueAt(i, 3)).equals(""))
                    aaa.setMor_snf(0.0f);
                else 
                    aaa.setMor_snf(Float.parseFloat((String)table.getValueAt(i, 3)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_snf(0);
            }
            
            
            try{
                if(((String)table.getValueAt(i, 4)).equals(""))
                    aaa.setMor_fat_rate(0.0f);
                else 
                    aaa.setMor_fat_rate(Float.parseFloat((String)table.getValueAt(i, 4)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_fat_rate(0);
            }
            
               try{
                
                    aaa.setMor_ghee((aaa.getMor_fat()*aaa.getMor_milk()/1000));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_ghee_ammount(0);
            }
            
            
             try{
                 if(((String)table.getValueAt(i, 5)).equals(""))
                    aaa.setMor_ghee_ammount(0.0f);
                else 
                     aaa.setMor_ghee_ammount(Float.parseFloat((String)table.getValueAt(i, 5)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setMor_ghee_ammount(0);
             }
            
             
             
               try{
                
                    aaa.setMor_powder((((aaa.getMor_snf()*25)+14+(aaa.getMor_fat()*2))*aaa.getMor_milk())/10000);
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_ghee_ammount(0);
            }
               
             try{
                 if(((String)table.getValueAt(i, 6)).equals(""))
                    aaa.setMor_powder_ammount(0.0f);
                else 
                     aaa.setMor_powder_ammount(Float.parseFloat((String)table.getValueAt(i, 6)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setMor_powder(0);
             }
             
             try{
                 if(((String)table.getValueAt(i, 7)).equals(""))
                    aaa.setMor_ammount(0.0f);
                else 
                     aaa.setMor_ammount(Float.parseFloat((String)table.getValueAt(i, 7)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setMor_ammount(0);
             }
             
          try{
                if(((String)table.getValueAt(i, 8)).equals(""))
                    aaa.setEve_milk(0.0f);
                else aaa.setEve_milk(Float.parseFloat((String)table.getValueAt(i, 8)));
            }
            catch(Exception e){
                e.printStackTrace();
                aaa.setEve_milk(0);
            }
            
            try{
                if(((String)table.getValueAt(i, 9)).equals(""))
                    aaa.setEve_fat(0.0f);
                else 
                    aaa.setEve_fat(Float.parseFloat((String)table.getValueAt(i, 9)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_fat(0);
                
                
            }   try{
                 if(((String)table.getValueAt(i, 10)).equals(""))
                    aaa.setEve_snf(0.0f);
                else 
                     aaa.setEve_snf(Float.parseFloat((String)table.getValueAt(i, 10)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setEve_snf(0);
             }
             
             
             
            try{
                if(((String)table.getValueAt(i, 11)).equals(""))
                    aaa.setEve_fat_rate(0.0f);
                else 
                    aaa.setEve_fat_rate(Float.parseFloat((String)table.getValueAt(i, 11)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_fat_rate(0);
            }
            
            
            
               try{
                         aaa.setEve_ghee((aaa.getEve_milk()*aaa.getEve_fat())/1000);
                
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_ghee(0.0f);
            }
               
            try{
                if((table.getValueAt(i, 12)+"").equals(""))
                    aaa.setEve_ghee_ammount(0.0f);
                else 
                {
                    if(table.getValueAt(i, 12) instanceof String)
                        aaa.setEve_ghee_ammount(Float.parseFloat((String)table.getValueAt(i, 12)));
                    else
                         aaa.setEve_ghee_ammount((float)table.getValueAt(i, 12));
                }
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_ghee_ammount(0.0f);
            }
            
            
                      try{
                         aaa.setEve_powder((((aaa.getEve_snf()*25)+14+(aaa.getEve_fat()*2))*aaa.getEve_milk())/10000);
                
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_powder(0.0f);
            }
  
                      
                      
            
            try{
                if((table.getValueAt(i, 13)+"").equals(""))
                    aaa.setEve_powder_ammount(0.0f);
                else 
                {
                    if(table.getValueAt(i, 13) instanceof String)
                        aaa.setEve_powder_ammount(Float.parseFloat((String)table.getValueAt(i, 13)));
                    else
                         aaa.setEve_powder_ammount((float)table.getValueAt(i, 13));
                }
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_powder_ammount(0.0f);
            }
            
            
            try{
                if((table.getValueAt(i, 14)+"").equals(""))
                    aaa.setEve_ammount(0.0f);
                else 
                {
                    if(table.getValueAt(i, 14) instanceof String)
                        aaa.setEve_ammount(Float.parseFloat((String)table.getValueAt(i, 14)));
                    else
                         aaa.setEve_ammount((float)table.getValueAt(i, 14));
                }
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_ammount(0.0f);
            }
            
            
            try{
                if((table.getValueAt(i, 15)+"").equals(""))
                    aaa.setTotal_ammount(0.0f);
                else 
                {
                    if(table.getValueAt(i, 15) instanceof String)
                        aaa.setTotal_ammount(Float.parseFloat((String)table.getValueAt(i, 15)));
                    else
                         aaa.setTotal_ammount((float)table.getValueAt(i, 15));
                }
            }catch(Exception e){
                e.printStackTrace();
                aaa.setTotal_ammount(0.0f);
            }
            
            
           
            aa.add(aaa);
        }
        Dao.sale_snf_transactions.divide_into_saved_N_new(aa);
         
        Dao.sale_snf_transactions.save(SaleSNF.new_enteries);
        Dao.sale_snf_transactions.update(SaleSNF.saved_enteries);
        System.out.println("UPPDDAATTEE"+SaleSNF.saved_enteries.size());
        System.out.println("SSSAAAVVVEEEDD"+SaleSNF.new_enteries.size());
        JOptionPane.showMessageDialog(null, "Data Saved!!");
        setLabels();
        
        
    }catch(Exception e){e.printStackTrace();}
// TODO add your handling code here:
    }//GEN-LAST:event_UpdateActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_exitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Update;
    private org.jdesktop.swingx.JXDatePicker date;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private static javax.swing.JLabel label_group_name;
    private javax.swing.JLabel sum_eve_ammount_l1;
    private javax.swing.JLabel sum_eve_ghee_l1;
    private javax.swing.JLabel sum_eve_milk_l;
    private javax.swing.JLabel sum_eve_powder_l1;
    private javax.swing.JLabel sum_mor_ammount_l1;
    private javax.swing.JLabel sum_mor_ghee_l;
    private javax.swing.JLabel sum_mor_milk_l;
    private javax.swing.JLabel sum_mor_powder_l1;
    private static javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public void editingStopped(ChangeEvent e) {
   
        
   String mor_milk=(String)table.getValueAt(table.getSelectedRow(), 1);
    String mor_fat=(String)table.getValueAt(table.getSelectedRow(), 2);
    String mor_snf=(String)table.getValueAt(table.getSelectedRow(), 3);
    String mor_fat_rate=(String)table.getValueAt(table.getSelectedRow(), 4);
    
    String eve_milk=(String)table.getValueAt(table.getSelectedRow(), 8);
    String eve_fat=(String)table.getValueAt(table.getSelectedRow(), 9);
    String eve_snf=(String)table.getValueAt(table.getSelectedRow(), 10);
    String eve_fat_rate=(String)table.getValueAt(table.getSelectedRow(), 11);
  
    
     
    float m_milk=0;
    float m_fat=0;
    float m_snf=0;
    float m_fat_rate=0;
    float e_milk=0;
    float e_fat=0;
    float e_snf=0;
    float e_fat_rate=0;
    float rec=0;
    int i=0;
    
    try{
    if(mor_milk.equals(""))m_milk=0;
    else 
    m_milk=Float.parseFloat(mor_milk);
    }catch(Exception e1){
    m_milk=0;
    table.setValueAt("", table.getSelectedRow(), 1);
    }
    
    try{
    if(eve_milk.equals(""))e_milk=0;
    else 
    e_milk=Float.parseFloat(eve_milk);
    }
    catch(Exception e2){
      e_milk=0;
      table.setValueAt("", table.getSelectedRow(), 8);
    }
    
    
    try{
    if(mor_fat.equals(""))m_fat=0;
    else 
    m_fat=Float.parseFloat(mor_fat);
    }catch(Exception e1){
        m_fat=0;
   table.setValueAt("", table.getSelectedRow(), 2);
    }
    
    try{
    if(eve_fat.equals(""))e_fat=0;
    else 
    e_fat=Float.parseFloat(eve_fat);
    }
    catch(Exception e2){
      e_fat=0;
      table.setValueAt("", table.getSelectedRow(), 9);
    }
    
    try{
    if(mor_snf.equals(""))m_snf=0;
    else 
    m_snf=Float.parseFloat(mor_snf);
    }catch(Exception e1){
        m_snf=0;
   table.setValueAt("", table.getSelectedRow(), 3);
    }
    
    try{
    if(eve_snf.equals(""))e_snf=0;
    else 
    e_snf=Float.parseFloat(eve_snf);
    }
    catch(Exception e2){
      e_snf=0;
      table.setValueAt("", table.getSelectedRow(), 10);
    }
    
    
    try{
    if(mor_fat_rate.equals(""))m_fat_rate=0;
    else 
    m_fat_rate=Float.parseFloat(mor_fat_rate);
    }catch(Exception e1){
   m_fat_rate=0;
   table.setValueAt("", table.getSelectedRow(), 4);
    }
    
    try{
    if(eve_fat_rate.equals(""))e_fat_rate=0;
    else 
    e_fat_rate=Float.parseFloat(eve_fat_rate);
    }
    catch(Exception e2){
     e_fat_rate=0;
     table.setValueAt("", table.getSelectedRow(), 11);
    }
    
    
  DecimalFormat df = new DecimalFormat("##.##");
    
/////GHEE   
    float ghee_m_cal=(m_milk*m_fat)/1000;
    float ghee_e_cal=(e_fat*e_milk)/1000;
    float total_ghee_cal=ghee_m_cal+ghee_e_cal;
    
/////POWDER
      float powder_m_cal=(((m_snf*25)+14+(m_fat*2))*m_milk)/10000;
      float powder_e_cal=(((e_snf*25)+14+(e_fat*2))*e_milk)/10000;
      float total_powder_cal=powder_m_cal+powder_e_cal;
    
/////GHEE AMMOUNT
     float ghee_m_ammount_cal=ghee_m_cal*m_fat_rate*6;
    float ghee_e_ammount_cal=ghee_e_cal*e_fat_rate*6;
    float total_ghee_ammount_cal=ghee_m_ammount_cal+ghee_e_ammount_cal;
    table.setValueAt(df.format(ghee_m_ammount_cal), table.getSelectedRow(), 5);
    table.setValueAt(df.format(ghee_e_ammount_cal), table.getSelectedRow(), 12);
/////POWDER AMMOUNT
    float powder_m_ammount_cal=(float)(powder_m_cal*((m_fat_rate*65*4)/85));
    float powder_e_ammount_cal=(float)(powder_e_cal*((e_fat_rate*65*4)/85));
    float total_powder_ammount_cal=powder_m_ammount_cal+powder_e_ammount_cal;
    
    table.setValueAt(df.format(powder_m_ammount_cal), table.getSelectedRow(), 6);
    table.setValueAt(df.format(powder_e_ammount_cal), table.getSelectedRow(), 13);
/////AMMOUNT
    table.setValueAt(df.format(ghee_m_ammount_cal+powder_m_ammount_cal), table.getSelectedRow(), 7); 
    table.setValueAt(df.format(ghee_e_ammount_cal+powder_e_ammount_cal), table.getSelectedRow(), 14);
    table.setValueAt(df.format(ghee_m_ammount_cal+powder_m_ammount_cal+ghee_e_ammount_cal+powder_e_ammount_cal), table.getSelectedRow(), 15); 
   setLabels();
           
    }
    
    
   
    
    
    
    
    
    
   
    

    


    

    private void fillTable() throws SQLException, ParseException {
       
    Dao.accounts acc=new Dao.accounts();
   acc.setAccount_typeid(account_typeid);
    acc.setGid(gid);
    accounts_list=acc.get_All_Accounts_under_group_N_Account_Type();
    
    Iterator<Dao.accounts> iterator=accounts_list.iterator();
    int j=0;
    double milk=0,ghee=0,powder=0,receive=0,ammount=0;
    
    DecimalFormat df = new DecimalFormat("##.##");
    while(iterator.hasNext()){
          acc=iterator.next();
       table.setValueAt(acc.getAname(), j, 0); 
         sale_snf_transactions trans=new sale_snf_transactions();
      trans.setGid(gid);
      
      trans.setAid(acc.getAid());
       trans.setTdate(new java.sql.Date(date.getDate().getTime()));
      trans=trans.getTransaction_aname_gname_date_given();
     if(trans.getAid()!=null){
          Update.setText("Update");
        table.setValueAt((trans.getMor_milk()!=0.0)?df.format(trans.getMor_milk())+"":"", j, 1);
        table.setValueAt((trans.getEve_milk()!=0.0)?df.format(trans.getEve_milk())+"":"", j, 8);
        table.setValueAt((trans.getMor_fat()!=0.0)?df.format(trans.getMor_fat())+"":"", j, 2);
        table.setValueAt((trans.getEve_fat()!=0.0)?df.format(trans.getEve_fat())+"":"", j, 9);
        table.setValueAt((trans.getMor_snf()!=0.0)?df.format(trans.getMor_snf())+"":"", j, 3);
        table.setValueAt((trans.getEve_snf()!=0.0)?df.format(trans.getEve_snf())+"":"", j, 10);
        table.setValueAt((trans.getMor_fat_rate()!=0.0)?df.format(trans.getMor_fat_rate())+"":"", j, 4);
        table.setValueAt((trans.getEve_fat_rate()!=0.0)?df.format(trans.getEve_fat_rate())+"":"", j, 11);
        table.setValueAt((trans.getMor_ghee_ammount()!=0.0)?df.format(trans.getMor_ghee_ammount())+"":"", j, 5);
        table.setValueAt((trans.getEve_ghee_ammount()!=0.0)?df.format(trans.getEve_ghee_ammount())+"":"", j, 12);
        table.setValueAt((trans.getMor_powder_ammount()!=0.0)?df.format(trans.getMor_powder_ammount())+"":"", j, 6);
        table.setValueAt((trans.getEve_powder_ammount()!=0.0)?df.format(trans.getEve_powder_ammount())+"":"", j, 13);
        table.setValueAt((trans.getMor_ammount()!=0.0)?df.format(trans.getMor_ammount())+"":"", j, 7);
        table.setValueAt((trans.getEve_ammount()!=0.0)?df.format(trans.getEve_ammount())+"":"", j, 14);
        table.setValueAt((trans.getTotal_ammount()!=0.0)?df.format(trans.getTotal_ammount())+"":"", j, 15);
     }
     else{
         table.setValueAt("", j, 1);
        table.setValueAt("", j, 2);
        table.setValueAt("", j, 3);
        table.setValueAt("", j, 4);
        table.setValueAt("", j, 5);
        table.setValueAt("", j, 6);
        table.setValueAt("", j, 7);
        table.setValueAt("", j, 8);
        table.setValueAt("", j, 9);
        table.setValueAt("", j, 10);
        table.setValueAt("", j, 11);
        table.setValueAt("", j, 12);
        table.setValueAt("", j, 13);
        table.setValueAt("", j, 14);
        table.setValueAt("", j, 15);
     }
      j++;
      
    }

    setLabels();
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    private void fillAccountList() throws Exception{
        
        Dao.accounts acc=new Dao.accounts();
        acc.setGid(gid);
        acc.setAccount_typeid(account_typeid);
        accounts_list=acc.get_All_Accounts_under_group_N_Account_Type();
        
    }

    public void setLabels(){
        float sum_m_milk=0;
        float sum_e_milk=0;
        float sum_m_ghee=0;
        float sum_e_ghee=0;
        float sum_m_powder=0;float sum_e_powder=0;
        float sum_m_ammount=0;float sum_e_ammount=0;
        
        for(int i=0;i<table.getRowCount();i++){
            
            ///
            try {
                if(table.getValueAt(i, 1).equals(""))
               sum_m_milk+=0;
                else
               sum_m_milk+=Float.parseFloat((String)table.getValueAt(i, 1));
               }catch(Exception e){
                sum_m_milk+=0;
               }
            ///
            ///
            try {
                if(table.getValueAt(i, 8).equals(""))
               sum_e_milk+=0;
                else
               sum_e_milk+=Float.parseFloat((String)table.getValueAt(i, 8));
               }catch(Exception e){
               sum_e_milk+=0;
               }
            ///
            
             ///
            try {
                if(table.getValueAt(i, 5).equals(""))
                  sum_m_ghee+=0;
                else{
                    if(table.getValueAt(i, 5) instanceof Float)
                  sum_m_ghee+=(float)table.getValueAt(i, 5);
                    else
                 sum_m_ghee+=Float.parseFloat((String)table.getValueAt(i, 5));}
                
               }catch(Exception e){
                sum_m_ghee+=0;
               }
            ///
            ///
            try {
                if(table.getValueAt(i, 12).equals(""))
               sum_e_ghee+=0;
                else{
                    if(table.getValueAt(i, 12) instanceof Float)
                  sum_e_ghee+=(Float)table.getValueAt(i, 12);
                    else
                 sum_e_ghee+=Float.parseFloat((String)table.getValueAt(i, 12));
                }
               }catch(Exception e){
                 sum_e_ghee+=0;
               }
            ///
            
            
             ///
            try {
                if(table.getValueAt(i, 6).equals(""))
                  sum_m_powder+=0;
                else{
                    if(table.getValueAt(i, 6) instanceof Float)
                  sum_m_powder+=(float)table.getValueAt(i, 6);
                    else
                 sum_m_powder+=Float.parseFloat((String)table.getValueAt(i, 6));}
                
               }catch(Exception e){
                sum_m_powder+=0;
               }
            ///
            ///
            try {
                if(table.getValueAt(i, 13).equals(""))
               sum_e_powder+=0;
                else{
                    if(table.getValueAt(i, 13) instanceof Float)
                  sum_e_powder+=(Float)table.getValueAt(i, 13);
                    else
                 sum_e_powder+=Float.parseFloat((String)table.getValueAt(i, 13));
                }
               }catch(Exception e){
                 sum_e_powder+=0;
               }
            ///
            
            
             ///
            try {
                if(table.getValueAt(i, 7).equals(""))
                  sum_m_ammount+=0;
                else{
                    if(table.getValueAt(i, 7) instanceof Float)
                  sum_m_ammount+=(float)table.getValueAt(i, 7);
                    else
                 sum_m_ammount+=Float.parseFloat((String)table.getValueAt(i, 7));}
                
               }catch(Exception e){
                sum_m_ammount+=0;
               }
            ///
            ///
            try {
                if(table.getValueAt(i, 14).equals(""))
               sum_e_ammount+=0;
                else{
                    if(table.getValueAt(i, 14) instanceof Float)
                  sum_e_ammount+=(Float)table.getValueAt(i, 14);
                    else
                 sum_e_ammount+=Float.parseFloat((String)table.getValueAt(i, 14));
                }
               }catch(Exception e){
                 sum_e_ammount+=0;
               }
            ///
            
            
            ///
            DecimalFormat df=new DecimalFormat("##.##");
            sum_mor_milk_l.setText("TOTAL MILK-MOR:"+df.format(sum_m_milk));
            sum_mor_ghee_l.setText("TOTAL GHEE-MOR:"+df.format(sum_m_ghee));
            sum_mor_powder_l1.setText("TOTAL POWDER-MOR:"+df.format(sum_m_powder));
            
            sum_mor_ammount_l1.setText("TOTAL AMMOUNT-MOR:"+df.format(sum_m_ammount));
            sum_eve_milk_l.setText("TOTAL MILK-EVE:"+df.format(sum_e_milk));
            sum_eve_ghee_l1.setText("TOTAL GHEE-EVE:"+df.format(sum_e_ghee));
            sum_eve_powder_l1.setText("TOTAL POWDER-EVE:"+df.format(sum_e_powder));
            
            sum_eve_ammount_l1.setText("TOTAL AMMOUNT-EVE:"+df.format(sum_e_ammount)); 
        }

}
}
