/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Transactions.SaleFatMultiple;

import Transactions.SaleFAT.*;
import Transactions.*;
import Beans.sale_fat_transactions;
import Reports.SaleFat;
import java.awt.Color;
import java.awt.Component;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author bansal
 */
public class SaleFATMultipleDaily extends javax.swing.JInternalFrame implements CellEditorListener{

static Date dd=null;
static int gid=0;
static String aid=null;
static String qaname=null;
static int account_typeid=0;
Beans.accounts selectedAccount=null;


    /**
     * Creates new form SaleFatSnf
     */
    public SaleFATMultipleDaily(Beans.accounts account,Date dt,JDesktopPane d ) throws SQLException, ParseException {    
        
        dd=dt;
        initComponents();
        selectedAccount=account;
          this.setTitle("Sale Fat Multiple Transaction");
        this.aname.setText(account.getAname());
        this.qaname=account.getAname();
        this.account_typeid=account.getAccount_typeid();
        this.gid=account.getGid();
        this.aid=account.getAid();
        table.getDefaultEditor(String.class).addCellEditorListener(this);
        fillTable();
         d.add(this);
    /*    String header[]={"Date","MorMilk","EveMilk","Ammount"};
        
        Object row[][]=new Object[30][];
        for(int i=0;i<30;i++){
            row[i]=new Object[]{new Date()+"","","",""};
       }
        DefaultTableModel dtm=new DefaultTableModel(row,header);
        JTable table=new JTable(dtm);
        table.setVisible(true);
        
        table.setBounds(50, 50, 400, 400);*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        aname = new javax.swing.JLabel();
        date = new org.jdesktop.swingx.JXDatePicker();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable(){

            public boolean isCellEditable(int row,int column) {
                if(column==5||column==6||column==12|column==11||column ==10||column==1||column==0) // specify this depending upon ur requirement. Here the cell 2,3 is not editable.
                return false;
                else
                return true;
            }
            public Component prepareRenderer
            (TableCellRenderer renderer,int Index_row, int Index_col) {
                Component comp = super.prepareRenderer(renderer, Index_row, Index_col);
                //even index, selected or not selected
                if (Index_row % 2 != 0 && !isCellSelected(Index_row, Index_col)) {
                    comp.setBackground(new Color(255, 228, 196));
                }
                else {
                    comp.setBackground(Color.white);
                }
                return comp;
            }

        };
        sum_mor_milk_l = new javax.swing.JLabel();
        sum_mor_ghee_l = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        sum_mor_ammount_l = new javax.swing.JLabel();
        sum_eve_ghee_l = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        fat_rate_b = new javax.swing.JTextField();
        fill_rate_rate = new javax.swing.JButton();
        sum_eve_milk_l = new javax.swing.JLabel();
        sum_eve_ammount_l = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        e_date = new org.jdesktop.swingx.JXDatePicker();
        s_date = new org.jdesktop.swingx.JXDatePicker();

        setClosable(true);
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconifiable(true);

        jPanel1.setBackground(new java.awt.Color(255, 228, 196));
        jPanel1.setForeground(new java.awt.Color(255, 228, 192));

        aname.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        aname.setText("GROUP_NAME");

        date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateActionPerformed(evt);
            }
        });

        jLabel1.setText("Date");

        date.setDate(dd);
        java.util.Date d=date.getDate();
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.YEAR, d.getYear());
        calendar.set(Calendar.MONTH, d.getMonth());
        Beans.entries entry=new Beans.entries();
        entry.setAccount_type_id(constants.Account_type.FAT_SALE_MULTIPLE);
        int numDays=0;
        try{
            numDays = entry.getEntryForAccount();
        }catch(Exception e){e.printStackTrace();}
        System.out.println("###############Days in month:"+numDays);
        Object row[][]=new Object[numDays][];

        for(int i=0;i<numDays;i++){
            row[i]=new Object[]{(i+1),d.getDate()+"-"+Cal.month(d.getMonth()+1),"","","","","","","","","","",""};
        }
        table.setModel(new javax.swing.table.DefaultTableModel(
            row,
            new String [] {
                "Entry","Date","MMilk","Fat","Fat Rate","Ghee","Ammount","EMILK","Fat","Fat Rate","Ghee","Ammount","Total Ammount"
            }
        ));
        table.setShowGrid(true);
        table.setCellSelectionEnabled(true);
        for(int i=0;i<table.getRowCount();i++){
            table.setRowHeight(30);
        }
        table.getColumnModel().getColumn(0).setMaxWidth(40);
        table.setSelectionBackground(new java.awt.Color(255, 228, 196));
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);
        for(int i=0;i<table.getColumnCount();i++){
            table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);}
        table.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tableFocusLost(evt);
            }
        });
        table.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tablePropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        sum_mor_milk_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_milk_l.setText("total milk");

        sum_mor_ghee_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_ghee_l.setText("total ghee");

        save.setText("Update");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        sum_mor_ammount_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_mor_ammount_l.setText("total ammount");

        sum_eve_ghee_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_ghee_l.setText("total ghee");

        jLabel2.setText("Fat Rate :");

        fill_rate_rate.setText("FILL");
        fill_rate_rate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fill_rate_rateActionPerformed(evt);
            }
        });

        sum_eve_milk_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_milk_l.setText("total milk");

        sum_eve_ammount_l.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        sum_eve_ammount_l.setText("total ammount");

        jButton2.setText("Report");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        e_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                e_dateActionPerformed(evt);
            }
        });

        s_date.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                s_dateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(save)
                        .addGap(18, 18, 18)
                        .addComponent(s_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(e_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(exit))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(206, 206, 206)
                        .addComponent(aname, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(fat_rate_b, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(fill_rate_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sum_mor_milk_l, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                            .addComponent(sum_eve_milk_l, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(43, 43, 43)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sum_mor_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_eve_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(sum_eve_ammount_l, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sum_mor_ammount_l, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(aname, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(fat_rate_b, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fill_rate_rate))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sum_mor_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sum_mor_milk_l, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sum_mor_ammount_l, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sum_eve_milk_l, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sum_eve_ghee_l, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sum_eve_ammount_l, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(e_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2)
                    .addComponent(exit)
                    .addComponent(save))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateActionPerformed

    try {
java.util.Date d=date.getDate();
Calendar calendar = Calendar.getInstance();
calendar.set(Calendar.YEAR, d.getYear());
calendar.set(Calendar.MONTH, d.getMonth());
Beans.entries entry=new Beans.entries();
entry.setAccount_type_id(constants.Account_type.FAT_SALE_MULTIPLE);
int numDays=0;
try{
numDays = entry.getEntryForAccount();
}catch(Exception e){e.printStackTrace();}
Object row[][]=new Object[numDays][];

        for(int i=0;i<numDays;i++){
            row[i]=new Object[]{(i+1),d.getDate()+"-"+Cal.month(d.getMonth()+1),"","","","","","","","","","",""};
       }
table.setModel(new javax.swing.table.DefaultTableModel(
    row,
    new String [] {
        "Entry","Date","MMilk","Fat","Fat Rate","Ghee","Ammount","EMILK","Fat","Fat Rate","Ghee","Ammount","Total Ammount"
    }
));
        
fillTable();
    }catch(Exception e){e.printStackTrace();}   
        // TODO add your handling code here:
    }//GEN-LAST:event_dateActionPerformed

    private void tablePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tablePropertyChange

      
// TODO add your handling code here:
    }//GEN-LAST:event_tablePropertyChange

    private void tableFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tableFocusLost


        
// TODO add your handling code here:
    }//GEN-LAST:event_tableFocusLost

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
    try {
        
   
            int rows=table.getRowCount();
            ArrayList<Beans.sale_fat_transactions> entries=new ArrayList<Beans.sale_fat_transactions>();
            SaleFAT.saved_enteries.clear();
       SaleFAT.new_enteries.clear();
       
        for(int i=0;i<rows ;i++){
            Beans.sale_fat_transactions aaa=new Beans.sale_fat_transactions();
            aaa.setAid(aid);
            aaa.setGid(gid);
            String year=(date.getDate().getYear()+1900)+"";
            SimpleDateFormat std=new SimpleDateFormat("dd-MMM-yyyy");
            Date d=std.parse((String)table.getValueAt(i, 0)+"-"+year);
            java.sql.Date d1=new java.sql.Date(d.getTime());
            aaa.setTdate(d1);
            
            try{
                if(((String)table.getValueAt(i, 1)).equals(""))
                    aaa.setMor_milk(0.0f);
                else aaa.setMor_milk(Float.parseFloat((String)table.getValueAt(i, 1)));
            }
            catch(Exception e){
                e.printStackTrace();
                aaa.setMor_milk(0);
            }
            
            try{
                if(((String)table.getValueAt(i, 2)).equals(""))
                    aaa.setMor_fat(0.0f);
                else 
                    aaa.setMor_fat(Float.parseFloat((String)table.getValueAt(i, 2)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_fat(0);
            }
            
            try{
                if(((String)table.getValueAt(i, 3)).equals(""))
                    aaa.setMor_fat_rate(0.0f);
                else 
                    aaa.setMor_fat_rate(Float.parseFloat((String)table.getValueAt(i, 3)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setMor_fat_rate(0);
            }
            
            
             try{
                 if(((String)table.getValueAt(i, 4)).equals(""))
                    aaa.setMor_ghee(0.0f);
                else 
                     aaa.setMor_ghee(Float.parseFloat((String)table.getValueAt(i, 4)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setMor_ghee(0);
             }
             
             try{
                 if(((String)table.getValueAt(i, 5)).equals(""))
                    aaa.setMor_ammount(0.0f);
                else 
                     aaa.setMor_ammount(Float.parseFloat((String)table.getValueAt(i, 5)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setMor_ammount(0);
             }
             
             
            try{
                 if(((String)table.getValueAt(i, 6)).equals(""))
                    aaa.setEve_milk(0.0f);
                else 
                     aaa.setEve_milk(Float.parseFloat((String)table.getValueAt(i, 6)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setEve_milk(0);
             }
             
             try{
                 if(((String)table.getValueAt(i, 7)).equals(""))
                    aaa.setEve_fat(0.0f);
                else 
                     aaa.setEve_fat(Float.parseFloat((String)table.getValueAt(i, 7)));
             }catch(Exception e){
                 e.printStackTrace();
                 aaa.setEve_fat(0);
             }
             
            try{
                if(((String)table.getValueAt(i, 8)).equals(""))
                    aaa.setEve_fat_rate(0.0f);
                else 
                    aaa.setEve_fat_rate(Float.parseFloat((String)table.getValueAt(i, 8)));
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_fat_rate(0);
            }
            
            try{
                if((table.getValueAt(i, 9)+"").equals(""))
                    aaa.setEve_ghee(0.0f);
                else 
                {
                    if(table.getValueAt(i, 9) instanceof String)
                        aaa.setEve_ghee(Float.parseFloat((String)table.getValueAt(i, 9)));
                    else
                         aaa.setEve_ghee((float)table.getValueAt(i, 9));
                }
            }catch(Exception e){
                e.printStackTrace();
                aaa.setEve_ghee(0.0f);
            }
            
              try{
                  if(((String)table.getValueAt(i, 10)).equals(""))
                    aaa.setEve_ammount(0.0f);
                else 
                      aaa.setEve_ammount(Float.parseFloat((String)table.getValueAt(i, 10)));
              }catch(Exception e){
                  e.printStackTrace();
                  aaa.setEve_ammount(0);
              }
              
                try{
                    if((table.getValueAt(i, 11)+"").equals(""))
                    aaa.setTotal_ammount(0.0f);
                else 
                    {
                        if(table.getValueAt(i, 11) instanceof String)
                          aaa.setTotal_ammount(Float.parseFloat((String)table.getValueAt(i, 11)));
                    else
                            aaa.setTotal_ammount((float)table.getValueAt(i, 11));
                    }
                        
                    }catch(Exception e) {
                      e.printStackTrace();
                    aaa.setTotal_ammount(0);
                  } 
 entries.add(aaa);
                          
                          /////
                          ////
                          
        }
            Beans.sale_fat_transactions.divide_into_saved_N_new(entries);
           
            Beans.sale_fat_transactions.update(SaleFAT.saved_enteries);
            Beans.sale_fat_transactions.save(SaleFAT.new_enteries);
            setLabels();
            JOptionPane.showMessageDialog(null, "Data Saved!!");
        
       
        
    }catch(Exception e){e.printStackTrace();}
// TODO add your handling code here:
    }//GEN-LAST:event_saveActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_exitActionPerformed

    private void fill_rate_rateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fill_rate_rateActionPerformed

  try{
      DecimalFormat df=new DecimalFormat("##.##");
       float fat_r=Float.parseFloat(fat_rate_b.getText());
      float fat_rate=fat_r;
        for(int i=0;i<table.getRowCount();i++){
            table.setValueAt(df.format(fat_r),i, 3);
            table.setValueAt(df.format(fat_r),i, 8);
           
        }
  fillTableAfterChangingRate();  
  }        
catch(Exception e){
    e.printStackTrace();
      JOptionPane.showMessageDialog(null, "Wrong value");
}

// TODO add your handling code here:
    }//GEN-LAST:event_fill_rate_rateActionPerformed

    private void e_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_e_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_e_dateActionPerformed

    private void s_dateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_s_dateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_s_dateActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

ArrayList<Beans.accounts> accs=new ArrayList<Beans.accounts>();
accs.add(selectedAccount);
String start_d=s_date.getDate().getYear()+1900+"/"+(s_date.getDate().getMonth()+1)+"/"+s_date.getDate().getDate();
String end_d=e_date.getDate().getYear()+1900+"/"+(e_date.getDate().getMonth()+1)+"/"+e_date.getDate().getDate();
            SaleFat sale_fat=new SaleFat(gid,start_d,end_d,accs);
                


// TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JLabel aname;
    private org.jdesktop.swingx.JXDatePicker date;
    private org.jdesktop.swingx.JXDatePicker e_date;
    private javax.swing.JButton exit;
    private javax.swing.JTextField fat_rate_b;
    private javax.swing.JButton fill_rate_rate;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXDatePicker s_date;
    private javax.swing.JButton save;
    private javax.swing.JLabel sum_eve_ammount_l;
    private javax.swing.JLabel sum_eve_ghee_l;
    private javax.swing.JLabel sum_eve_milk_l;
    private javax.swing.JLabel sum_mor_ammount_l;
    private javax.swing.JLabel sum_mor_ghee_l;
    private javax.swing.JLabel sum_mor_milk_l;
    private static javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    @Override
    public void editingStopped(ChangeEvent e) {
    
    String mor_milk=(String)table.getValueAt(table.getSelectedRow(), 1);
    String mor_fat=(String)table.getValueAt(table.getSelectedRow(), 2);
    String mor_fat_rate=(String)table.getValueAt(table.getSelectedRow(), 3);
    
    String eve_milk=(String)table.getValueAt(table.getSelectedRow(), 6);
    String eve_fat=(String)table.getValueAt(table.getSelectedRow(), 7);
    String eve_fat_rate=(String)table.getValueAt(table.getSelectedRow(), 8);
    

    float m_milk=0;
    float m_fat=0;
    float m_fat_rate=0;
    float e_milk=0;
    float e_fat=0;
    float e_fat_rate=0;
    float rec=0;
    int i=0;
    try{
    if(mor_milk.equals(""))m_milk=0;
    else 
    m_milk=Float.parseFloat(mor_milk);
    }catch(Exception e1){
    m_milk=0;
    table.setValueAt("", table.getSelectedRow(), 1);
    }
    
    try{
    if(eve_milk.equals(""))e_milk=0;
    else 
    e_milk=Float.parseFloat(eve_milk);
    }
    catch(Exception e2){
      e_milk=0;
      table.setValueAt("", table.getSelectedRow(), 6);
    }
    
    
    try{
    if(mor_fat.equals(""))m_fat=0;
    else 
    m_fat=Float.parseFloat(mor_fat);
    }catch(Exception e1){
        m_fat=0;
   table.setValueAt("", table.getSelectedRow(), 2);
    }
    
    try{
    if(eve_fat.equals(""))e_fat=0;
    else 
    e_fat=Float.parseFloat(eve_fat);
    }
    catch(Exception e2){
      e_fat=0;
      table.setValueAt("", table.getSelectedRow(), 7);
    }
    
    
    try{
    if(mor_fat_rate.equals(""))m_fat_rate=0;
    else 
    m_fat_rate=Float.parseFloat(mor_fat_rate);
    }catch(Exception e1){
   m_fat_rate=0;
   table.setValueAt("", table.getSelectedRow(), 3);
    }
    
    try{
    if(eve_fat_rate.equals(""))e_fat_rate=0;
    else 
    e_fat_rate=Float.parseFloat(eve_fat_rate);
    }
    catch(Exception e2){
     e_fat_rate=0;
     table.setValueAt("", table.getSelectedRow(), 8);
    }
    
    
    
    
  
    DecimalFormat df=new DecimalFormat("##.##");
    
    table.setValueAt(df.format((m_milk*m_fat)/1000), table.getSelectedRow(), 4);
    table.setValueAt(df.format((e_fat*e_milk)/1000), table.getSelectedRow(), 9); 
   
    
    table.setValueAt(df.format((m_milk*m_fat*m_fat_rate)/100), table.getSelectedRow(), 5);
    table.setValueAt(df.format(((e_fat*e_milk*e_fat_rate))/100), table.getSelectedRow(), 10); 
    float amm=(((m_milk*m_fat*m_fat_rate)/100)+((e_fat*e_milk*e_fat_rate))/100);
   table.setValueAt(df.format(amm), table.getSelectedRow(), 11);
    
    int r=table.getRowCount();
    
    
    float sum_mor_milk=0;
    for(i=0;i<r;i++){
    try{    if(((String)table.getValueAt(i, 1)).equals(""))
            sum_mor_milk+=0;
        else
    sum_mor_milk+=Float.parseFloat((String)table.getValueAt(i, 1));    
    }catch(Exception ee){sum_mor_milk+=0;
        
    }}
    
    
    float sum_eve_milk=0;
    for(i=0;i<r;i++){
    try{    if(((String)table.getValueAt(i, 6)).equals(""))
            sum_eve_milk+=0;
        else
    sum_eve_milk+=Float.parseFloat((String)table.getValueAt(i, 6));    
    }catch(Exception ee){sum_eve_milk+=0;
        
    }}
    
    
    float sum_mor_ghee=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 4)).equals(""))
            sum_mor_ghee+=0;
        else
    sum_mor_ghee+=Float.parseFloat((String)table.getValueAt(i, 4)); 
  }catch(Exception ea){sum_mor_ghee+=0;
      
  }}
    
   float sum_eve_ghee=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 9)).equals(""))
            sum_eve_ghee+=0;
        else
    sum_eve_ghee+=Float.parseFloat((String)table.getValueAt(i, 9)); 
  }catch(Exception ea){sum_eve_ghee+=0;
      
  }}
    
    
       float sum_mor_ammount=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 5)).equals(""))
            sum_mor_ammount+=0;
        else
    sum_mor_ammount+=Float.parseFloat((String)table.getValueAt(i, 5)); 
  }catch(Exception ea){sum_mor_ammount+=0;
      
  }}
    
   float sum_eve_ammount=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 10)).equals(""))
            sum_eve_ammount+=0;
        else
    sum_eve_ammount+=Float.parseFloat((String)table.getValueAt(i, 10)); 
  }catch(Exception ea){sum_eve_ammount+=0;
      
  }}
    
       
       
   
    
    
    
    sum_mor_milk_l.setText("TOTAL MILK-MOR:"+df.format(sum_mor_milk));
    sum_eve_milk_l.setText("TOTAL MILK-EVE:"+df.format(sum_eve_milk));
    sum_mor_ghee_l.setText("TOTAL GHEE-MOR:"+df.format(sum_mor_ghee));
    sum_eve_ghee_l.setText("TOTAL GHEE-EVE:"+df.format(sum_eve_ghee));
    sum_mor_ammount_l.setText("TOTAL AMMOUNT-MOR:"+df.format(sum_mor_ammount));
    sum_eve_ammount_l.setText("TOTAL AMMOUNT-EVE:"+df.format(sum_eve_ammount));
           
    }
    
    
   
    

    


    

    private void fillTable() throws SQLException, ParseException {
       
    sale_fat_transactions a=new sale_fat_transactions();
    a.setAid(aid);
    a.setGid(gid);
    
    SimpleDateFormat std=new SimpleDateFormat("dd-MMM-yyyy");
    
      String ss=date.getDate().getDate()+"-"+Cal.month(date.getDate().getMonth()+1)+"-"+(date.getDate().getYear()+1900)+"";
   
    java.sql.Date d=new java.sql.Date(std.parse(ss).getTime());
    a.setTdate(d);
    ArrayList<sale_fat_transactions> aa=a.get();
    Iterator<sale_fat_transactions> aaa=aa.iterator();
    int i=0;
    float milk=0,ghee=0,receive=0,ammount=0;

 DecimalFormat df = new DecimalFormat("##.##");
    while(aaa.hasNext()){
        
        sale_fat_transactions aaaa=aaa.next();
        int date=aaaa.getTdate().getDate()-1;
        
        /////
        float dd= aaaa.getMor_milk();
        milk+=dd;  
        table.setValueAt((dd==0)?"":df.format(dd), date, 1);
        
        dd= aaaa.getMor_fat();
        table.setValueAt((dd==0)?"":df.format(dd), date, 2);
        
        
        dd= aaaa.getMor_fat_rate();
        table.setValueAt((dd==0)?"":df.format(dd), date, 3);
        ////
        
        dd= aaaa.getMor_ghee();
        table.setValueAt((dd==0)?"":df.format(dd), date, 4);
        ////
        
        dd= aaaa.getMor_ammount();
        table.setValueAt((dd==0)?"":df.format(dd), date, 5);
        ////
        
        /////
        dd= aaaa.getEve_milk();
        
        table.setValueAt((dd==0)?"":df.format(dd), date, 6);
        
        dd= aaaa.getEve_fat();
        table.setValueAt((dd==0)?"":df.format(dd), date, 7);
        
        
        dd= aaaa.getEve_fat_rate();
        table.setValueAt((dd==0)?"":df.format(dd), date, 8);
        ////
        
        
        dd= aaaa.getEve_ghee();
          
        table.setValueAt((dd==0)?"":df.format(dd), date, 9);
        
        dd= aaaa.getEve_ammount();
        
        table.setValueAt((dd==0)?"":df.format(dd), date, 10);
        
        dd= aaaa.getTotal_ammount();
        
        table.setValueAt((dd==0)?"":df.format(dd), date, 11);
         
    i++;    
        
    }
    
    
    setLabels();
    
    
    
    }

    @Override
    public void editingCanceled(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    
    public void setLabels(){
        float mor_milk=0;
        float eve_milk=0;
        float mor_ghee=0;
        float eve_ghee=0;
        float mor_ammount=0;
        float eve_ammount=0;
        
        
        for(int i=0;i<table.getRowCount();i++){
            
            ///
            try {
                if(table.getValueAt(i, 1).equals(""))
               mor_milk+=0;
                else
                    mor_milk+=Float.parseFloat((String)table.getValueAt(i, 1));
               }catch(Exception e){
                   mor_milk+=0;
               }
            ///
            ///
            try {
                if(table.getValueAt(i, 6).equals(""))
               eve_milk+=0;
                else
                    eve_milk+=Float.parseFloat((String)table.getValueAt(i, 6));
               }catch(Exception e){
                   eve_milk+=0;
               }
            ///
            
             ///
            try {
                if(table.getValueAt(i, 4).equals(""))
                  mor_ghee+=0;
                else{
                       if(table.getValueAt(i, 4) instanceof Float)
                           mor_ghee+=(float)table.getValueAt(i, 4);
                       else
                       mor_ghee+=Float.parseFloat((String)table.getValueAt(i, 4));
                }}catch(Exception e){
                   e.printStackTrace();
                   mor_ghee+=0;
               }
            ///
            try {
                if(table.getValueAt(i, 9).equals(""))
                  eve_ghee+=0;
                else{
                       if(table.getValueAt(i, 9) instanceof Float)
                           eve_ghee+=(float)table.getValueAt(i, 9);
                       else
                       eve_ghee+=Float.parseFloat((String)table.getValueAt(i, 9));
                }}catch(Exception e){
                   e.printStackTrace();
                   eve_ghee+=0;
               }
            
            
            try {
                if(table.getValueAt(i, 5).equals(""))
                   mor_ammount+=0;
                else
                    mor_ammount+=Float.parseFloat((String)table.getValueAt(i, 5));
               }catch(Exception e){
                   mor_ammount+=0;
               }
            ///
            
            try {
                if(table.getValueAt(i, 10).equals(""))
                   eve_ammount+=0;
                else
                    eve_ammount+=Float.parseFloat((String)table.getValueAt(i, 10));
               }catch(Exception e){
                   eve_ammount+=0;
               }
            ///
            
            
            DecimalFormat df=new DecimalFormat("##.##");
            sum_mor_milk_l.setText("TOTAL MILK-MOR:"+df.format(mor_milk));
            sum_mor_ghee_l.setText("TOTAL GHEE-MOR:"+df.format(mor_ghee));
            sum_mor_ammount_l.setText("TOTAL AMMOUNT-MOR:"+df.format(mor_ammount));
            sum_eve_ghee_l.setText("TOTAL GHEE-EVE:"+df.format(eve_ghee));
            sum_eve_ammount_l.setText("TOTAL AMMOUNT-EVE:"+df.format(eve_ammount));
            sum_eve_milk_l.setText("TOTAL MILK-EVE:"+df.format(eve_milk));
        }
}

    private void fillTableAfterChangingRate() {
   for(int i=0;i<table.getRowCount();i++){
       
       
       
    String mor_milk=(String)table.getValueAt(i, 1);
    String mor_fat=(String)table.getValueAt(i, 2);
    String mor_fat_rate=(String)table.getValueAt(i, 3);
    
    String eve_milk=(String)table.getValueAt(i, 6);
    String eve_fat=(String)table.getValueAt(i, 7);
    String eve_fat_rate=(String)table.getValueAt(i, 8);
    

    float m_milk=0;
    float m_fat=0;
    float m_fat_rate=0;
    float e_milk=0;
    float e_fat=0;
    float e_fat_rate=0;
    float rec=0;
    
    try{
    if(mor_milk.equals(""))m_milk=0;
    else 
    m_milk=Float.parseFloat(mor_milk);
    }catch(Exception e1){
    m_milk=0;
    table.setValueAt("", i, 1);
    }
    
    try{
    if(eve_milk.equals(""))e_milk=0;
    else 
    e_milk=Float.parseFloat(eve_milk);
    }
    catch(Exception e2){
      e_milk=0;
      table.setValueAt("", i, 6);
    }
    
    
    try{
    if(mor_fat.equals(""))m_fat=0;
    else 
    m_fat=Float.parseFloat(mor_fat);
    }catch(Exception e1){
        m_fat=0;
   table.setValueAt("", i, 2);
    }
    
    try{
    if(eve_fat.equals(""))e_fat=0;
    else 
    e_fat=Float.parseFloat(eve_fat);
    }
    catch(Exception e2){
      e_fat=0;
      table.setValueAt("", i, 7);
    }
    
    
    try{
    if(mor_fat_rate.equals(""))m_fat_rate=0;
    else 
    m_fat_rate=Float.parseFloat(mor_fat_rate);
    }catch(Exception e1){
   m_fat_rate=0;
   table.setValueAt("", i, 3);
    }
    
    try{
    if(eve_fat_rate.equals(""))e_fat_rate=0;
    else 
    e_fat_rate=Float.parseFloat(eve_fat_rate);
    }
    catch(Exception e2){
     e_fat_rate=0;
     table.setValueAt("", i, 8);
    }
    
    
    
    
  
    DecimalFormat df=new DecimalFormat("##.##");
    
    table.setValueAt(((df.format((m_milk*m_fat)/1000)).equals("0"))?"":(df.format((m_milk*m_fat)/1000)), i, 4);
    table.setValueAt(df.format((e_fat*e_milk)/1000).equals("0")?"":df.format((e_fat*e_milk)/1000), i, 9); 
   
    
    table.setValueAt(df.format((m_milk*m_fat*m_fat_rate)/100).equals("0")?"":df.format((m_milk*m_fat*m_fat_rate)/100), i, 5);
    table.setValueAt(df.format(((e_fat*e_milk*e_fat_rate))/100).equals("0")?"":df.format(((e_fat*e_milk*e_fat_rate))/100), i, 10); 
    float amm=(((m_milk*m_fat*m_fat_rate)/100)+((e_fat*e_milk*e_fat_rate))/100);
   table.setValueAt(df.format(amm).equals("0")?"":df.format(amm), i, 11);
    
       
       
   }
    int i=0;
    int r=table.getRowCount();
    
    
    float sum_mor_milk=0;
    for(i=0;i<r;i++){
    try{    if(((String)table.getValueAt(i, 1)).equals(""))
            sum_mor_milk+=0;
        else
    sum_mor_milk+=Float.parseFloat((String)table.getValueAt(i, 1));    
    }catch(Exception ee){sum_mor_milk+=0;
        
    }}
    
    
    float sum_eve_milk=0;
    for(i=0;i<r;i++){
    try{    if(((String)table.getValueAt(i, 6)).equals(""))
            sum_eve_milk+=0;
        else
    sum_eve_milk+=Float.parseFloat((String)table.getValueAt(i, 6));    
    }catch(Exception ee){sum_eve_milk+=0;
        
    }}
    
    
    float sum_mor_ghee=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 4)).equals(""))
            sum_mor_ghee+=0;
        else
    sum_mor_ghee+=Float.parseFloat((String)table.getValueAt(i, 4)); 
  }catch(Exception ea){sum_mor_ghee+=0;
      
  }}
    
   float sum_eve_ghee=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 9)).equals(""))
            sum_eve_ghee+=0;
        else
    sum_eve_ghee+=Float.parseFloat((String)table.getValueAt(i, 9)); 
  }catch(Exception ea){sum_eve_ghee+=0;
      
  }}
    
    
       float sum_mor_ammount=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 5)).equals(""))
            sum_mor_ammount+=0;
        else
    sum_mor_ammount+=Float.parseFloat((String)table.getValueAt(i, 5)); 
  }catch(Exception ea){sum_mor_ammount+=0;
      
  }}
    
   float sum_eve_ammount=0;
       for(i=0;i<r;i++){
  try{ if(((String)table.getValueAt(i, 10)).equals(""))
            sum_eve_ammount+=0;
        else
    sum_eve_ammount+=Float.parseFloat((String)table.getValueAt(i, 10)); 
  }catch(Exception ea){sum_eve_ammount+=0;
      
  }}
    
       
       
   
    
    
    DecimalFormat df=new DecimalFormat("##.##");
    sum_mor_milk_l.setText("TOTAL MILK-MOR:"+df.format(sum_mor_milk));
    sum_eve_milk_l.setText("TOTAL MILK-EVE:"+df.format(sum_eve_milk));
    sum_mor_ghee_l.setText("TOTAL GHEE-MOR:"+df.format(sum_mor_ghee));
    sum_eve_ghee_l.setText("TOTAL GHEE-EVE:"+df.format(sum_eve_ghee));
    sum_mor_ammount_l.setText("TOTAL AMMOUNT-MOR:"+df.format(sum_mor_ammount));
    sum_eve_ammount_l.setText("TOTAL AMMOUNT-EVE:"+df.format(sum_eve_ammount));
           
    
    
    }
}